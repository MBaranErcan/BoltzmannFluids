#<compute shader>

#version 460 core

#define D2Q9 0
#define D3Q15 1
#define D3Q19 2
#define D3Q27 3

#define fp16 0
#define fp32 1

#define floating_point_accuracy fp32
#define velocity_set D2Q9

#if velocity_set == D2Q9
	#define volume_dimentionality 2
	#define velocity_count 9
#elif velocity_set == D3Q15
	#define volume_dimentionality 3
	#define velocity_count 15
#elif velocity_set == D3Q19
	#define volume_dimentionality 3
	#define velocity_count 19
#elif velocity_set == D3Q27
	#define volume_dimentionality 3
	#define velocity_count 27
#else
	#error "velocity set is not supported"
#endif

#if floating_point_accuracy == fp32
#else
	#error "other floating point systems than fp32 aren't supported"
#endif

#define id gl_GlobalInvocationID

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) uniform velocity_set_buffer {
	vec4[velocity_count] lattice_velocity_set;
};

layout(std430, binding = 0) buffer lattice_buffer_source {
	float[] lattice_source;
};

layout(std430, binding = 1) buffer lattice_buffer_target {
	float[] lattice_target;
};

uniform ivec2 lattice_resolution;
uniform float lattice_speed_of_sound;
uniform float relaxation_time;

int get_inverse_lattice_direction_index(int lattice_velocity_index){
	if (lattice_velocity_index == 0 || lattice_velocity_index >= velocity_count)
		return 0;

	#if volume_dimentionality == 2
		bool is_in_first_half = lattice_velocity_index-1 < velocity_count / 2;
		return is_in_first_half ? lattice_velocity_index + (velocity_count / 2) : lattice_velocity_index - (velocity_count / 2);
	#else
		bool is_odd = lattice_velocity_index % 2 == 1;
		return is_odd ? lattice_velocity_index + 1 : lattice_velocity_index - 1;
	#endif
}

float get_lattice_source(ivec2 pixel_coord, int velocity_index){
	return lattice_source[(pixel_coord.y * lattice_resolution.x + pixel_coord.x) * velocity_count + velocity_index];
}

void set_lattice_source(ivec2 pixel_coord, int velocity_index, float value){
	lattice_source[(pixel_coord.y * lattice_resolution.x + pixel_coord.x) * velocity_count + velocity_index] = value;
}

float get_lattice_target(ivec2 pixel_coord, int velocity_index){
	return lattice_target[(pixel_coord.y * lattice_resolution.x + pixel_coord.x) * velocity_count + velocity_index];
}

void set_lattice_target(ivec2 pixel_coord, int velocity_index, float value){
	lattice_target[(pixel_coord.y * lattice_resolution.x + pixel_coord.x) * velocity_count + velocity_index] = value;
}

vec3 get_lattice_velocity(int velocity_index){
	return lattice_velocity_set[velocity_index].xyz;
}

float get_lattice_weight(int velocity_index){
	return lattice_velocity_set[velocity_index].w;
}

float compute_density(ivec2 pixel_coord){
	float density = 0;
	for (int i = 0; i < velocity_count; i++)
		density += get_lattice_source(pixel_coord, i);
	return density;
}

vec3 compute_velocity(ivec2 pixel_coord, float density){
	vec3 velocity = vec3(0);
	for (int i = 0; i < velocity_count; i++)
		velocity += get_lattice_source(pixel_coord, i) * get_lattice_velocity(i);
	return velocity / density;
}

float compute_equilibrium(float density, vec3 velocity, int direction){
	float p = density;
	vec3 u = velocity;
	float w = get_lattice_weight(direction);
	vec3 ci = get_lattice_velocity(direction);
	float cs = lattice_speed_of_sound;

	float ci_dot_u = dot(ci, u);
	float ci_dot_u2 = pow(ci_dot_u, 2);
	float u_dot_u = dot(u, u);
	float cs2 = pow(cs, 2);
	float cs4 = pow(cs, 4);

	float equilibrium = w*p*(1 + 3*ci_dot_u/cs2 + 9*ci_dot_u2/(2*cs4) - 3*u_dot_u/(2*cs2)); 
	return equilibrium;
}

float apply_bgk_collision(float current_velocity, float equilibrium){
	return current_velocity + (equilibrium - current_velocity) / relaxation_time;
}

void main(){
	
	if (id.x >= lattice_resolution.x * lattice_resolution.y)
		return;

	int pixel_id = int(id.x);
	ivec2 pixel_coord = ivec2(pixel_id % lattice_resolution.x, pixel_id / lattice_resolution.x);

	float density = compute_density(pixel_coord);
	if (density == 0)
		return;
	vec3 velocity = compute_velocity(pixel_coord, density);
	if (velocity == 0)
		return;
	for (int direction = 0; direction < velocity_count; direction++){
		float weight = get_lattice_weight(direction);
		float equilibrium_velocity = compute_equilibrium(density, velocity, direction);
		lattice_target[pixel_id * velocity_count + direction] = apply_bgk_collision(get_lattice_source(pixel_coord, direction), equilibrium_velocity);
	}
}