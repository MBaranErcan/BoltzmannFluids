#<compute shader>

#version 460 core

#define D2Q9 0
#define D3Q15 1
#define D3Q19 2
#define D3Q27 3

#define fp16 0
#define fp32 1

#define floating_point_accuracy fp32
#define velocity_set D2Q9

#if velocity_set == D2Q9
	#define volume_dimentionality 2
	#define velocity_count 9
#elif velocity_set == D3Q15
	#define volume_dimentionality 3
	#define velocity_count 15
#elif velocity_set == D3Q19
	#define volume_dimentionality 3
	#define velocity_count 19
#elif velocity_set == D3Q27
	#define volume_dimentionality 3
	#define velocity_count 27
#else
	#error "velocity set is not supported"
#endif

#if floating_point_accuracy == fp32
#else
	#error "other floating point systems than fp32 aren't supported"
#endif

#define id gl_GlobalInvocationID

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) uniform velocity_set_buffer {
	vec4[velocity_count] lattice_velocity_set;
};

layout(std430, binding = 1) buffer lattice_buffer {
	float[] lattice;
};

layout(std430, binding = 2) buffer boundries_buffer {
	int[] boundries;
};

uniform ivec2 lattice_resolution;

int get_inverse_lattice_direction_index(int lattice_velocity_index){
	if (lattice_velocity_index == 0 || lattice_velocity_index >= velocity_count)
		return 0;

	bool is_odd = lattice_velocity_index % 2 == 1;
	return is_odd ? lattice_velocity_index + 1 : lattice_velocity_index - 1;
}

bool get_boundry(ivec2 pixel_coord) {
	int boundry = 0;
	int pixel_id = pixel_coord.y * lattice_resolution.x + pixel_coord.x;
	int byte_id = pixel_id / 32;
	int bit_id = pixel_id % 32;
	return (boundries[byte_id] & 1 << bit_id) != 0;
}

void main(){
	
	if (id.x >= lattice_resolution.x * lattice_resolution.y)
		return;
	
	int pixel_id = int(id.x);
	ivec2 pixel_coord = ivec2(pixel_id.x % lattice_resolution.x, pixel_id.x / lattice_resolution.x);
	
	if (!get_boundry(pixel_coord))
		return;

	for (int population_id = 1; population_id < velocity_count; population_id+=2){
	
		int inv_population_id = get_inverse_lattice_direction_index(population_id);
		
		float value_a = lattice[pixel_id * velocity_count + population_id];
		float value_b = lattice[pixel_id * velocity_count + inv_population_id];
	
		lattice[pixel_id * velocity_count + population_id] = value_b;
		lattice[pixel_id * velocity_count + inv_population_id] = value_a;
	}
}